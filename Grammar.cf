comment "//" ;
comment "/*" "*/" ;

{- Program -}
Prog.  Program  ::= [Decl] [Stmt] ;
entrypoints Program ;

{- Type literals -}
token TokenError '`' ((char - ["`\\"]) | ('\\' ["`\\nt"]))* '`' ;

BTrue.  Boolean  ::= "true" ;
BFalse. Boolean  ::= "false" ;

LNon.  Literal  ::= "None" ;
LInt.  Literal  ::= Integer ;
LBool. Literal  ::= Boolean ;
LStr.  Literal  ::= String ;
LErr.  Literal  ::= TokenError ;
LArr.  Literal  ::= "[" [Exp] "]" ;
LTup.  Literal  ::= "<|" [Exp] "|>" ;

{- Comparators -}
CLt.      Comp  ::= "<" ;
CGt.      Comp  ::= ">" ;
CLe.      Comp  ::= "<=" ;
CGe.      Comp  ::= ">=" ;
CEq.      Comp  ::= "==" ;

{- Boolean operators -}
BAnd.     BOp   ::= "and" ;
BOr.      BOp   ::= "or" ;

{- Expressions -}
ECall.    Exp6  ::= Call ;
EVar.     Exp6  ::= Ident ;
ELit.     Exp6  ::= Literal ;
ETimes.   Exp5  ::= Exp5 "*" Exp6 ;
EDiv.     Exp5  ::= Exp5 "/" Exp6 ;
EMod.     Exp5  ::= Exp5 "%" Exp6 ;
EPlus.    Exp4  ::= Exp4 "+" Exp5 ;
EMinus.   Exp4  ::= Exp4 "-" Exp5 ;
EComp.    Exp3  ::= Exp3 Comp Exp4 ;
ENot.     Exp2  ::= "not" Exp3 ;
EBool.    Exp1  ::= Exp1 BOp Exp2 ;
coercions Exp 6 ;
separator Exp "," ;

{- Function calls -}
CFun.     Call  ::= Ident "(" [Exp] ")" ;
CMet.     Call  ::= Ident "." Ident "(" [Exp] ")" ;

{- Types -}
TAny.     Type  ::= "any" ;
TNone.    Type  ::= "void" ;
TInt.     Type  ::= "int" ;
TBool.    Type  ::= "bool" ;
TString.  Type  ::= "string" ;
TError.   Type  ::= "error" ;
TArray.   Type  ::= "[" Type "]" ;
TTuple.   Type  ::= "<|" [Type] "|>" ;
TFunc.    Type  ::= "(" [Type] ")" "->" Type ;
separator nonempty Type "," ;

{- Function parameters -}
PVal.     Param ::= Ident Type ;
separator Param "," ;

{- Variables -}
separator Ident "," ;

{- Declarations -}
DVar.     Decl  ::= "var" Ident Type "=" Exp ;
DFunc.    Decl  ::= "func" Ident "(" [Param] ")" "->" Type Stmt ;
separator Decl ";" ;

{- Conditionals -}
EElif.    Elif  ::= "elif" Exp Stmt ;
separator Elif "" ;

{- Statements -}
SBlock.   Stmt  ::= "{" [Decl] [Stmt] "}";
SAssign.  Stmt  ::= Ident "=" Exp ;
SUnpack.  Stmt  ::= [Ident] "<-" Exp ;
SReturn.  Stmt  ::= "return" Exp ;
SPrint.   Stmt  ::= "print" [Exp] ;
SIf.      Stmt  ::= "if" Exp Stmt [Elif] ;
SIfelse.  Stmt  ::= "if" Exp Stmt [Elif] "else" Stmt ;
SWhile.   Stmt  ::= "while" Exp Stmt ;
SBreak.   Stmt  ::= "break" ;
SCont.    Stmt  ::= "continue" ;
SCall.    Stmt  ::= Call ;
terminator Stmt ";" ;
