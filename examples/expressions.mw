var f int = 0;
var x string = "Ala ma kota";

func test(n int) -> int {
  print "x in `test` function has a value of: ", x;
  return 0;
  return n;
};

func fib(n int) -> int {
  if n == 0 or n == 1
    return 1;

  return fib(n -1) + fib (n -2);
};

func loopTest(n int) -> int {
  var i int = 0;
  while i < n {
    i = i + 1;
    print i, ")";
    if i < 5 {
      print " => Before continue";
      continue;
      print " => After continue";
    };
    print " => Not continue.";
    if i > 10
      return 0;
    print " => Not return.";
  };
  print " => Loop finished.";
};

var i int = 0;
x = "Jan Kowalski" ;
print "x in `main` body has a value of: ", x;

{
  var x int = 10;
  test(10);
  x = 30;
  print "x in `main` block has a value of: ", x;
  test(10);
};

print "=======================================================";

while i < 10 {
  i = i + 1;
  print "Fibonacci ", i, " = ", fib(i);
};

{
  var array [int] = [fib(0), fib(1), fib(2), fib(3), fib(4), fib(5)];
  print "Fibonacci numbers: ", array;
};

{
  var array [int] = [];
  var i int = 0;
  while i < 10 {
    array.Append(fib(i));
    i = i + 1;
  };
  print "Fibonacci numbers: ", array;
  print "8th fibonacci number is: ", array.At(8);
};

print "=======================================================";
print loopTest(50);

{
  var array [[int]] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
  print "=======================================================";
  print "2D array: ", array;
};

{
  var value int = 2;
  var name string = "Jan";
  var err error = ``;
  var tuple <|int, string, error|> = <|value, name, err|>;
  print "=======================================================";
  print "Tuple: ", tuple;

  tuple = <|30, "Maria", `Error`|>;
  print "Changed Tuple: ", tuple;

  print "Vars: ", value, ", ", name, ", ", err;
  value, name, err <- tuple;

  print "Unpacked: ", value, ", ", name, ", ", err;
};

{
  var array [int] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
  func reverse (array [int]) -> [int] {
    var i int = 0;
    var reversed [int] = array;
    while i < array.Length() {
      reversed.Put(i, array.At(array.Length() - i - 1));
      i = i + 1;
    };
    return reversed;
  };
  print "=======================================================";
  print "Array: ", array;
  print "Reversed: ", reverse(array);
};

{
  var tuple <|int, string, error|> = <|1, "Jan", `err`|>;
  print "Tuple: ", tuple;
  tuple.Exchange(1, "Janusz");
  print "Changed Tuple: ", tuple;
  print "Extracted value: ", tuple.Extract(0);
};

{
  func multiplierGenerator(mult int) -> (int) -> int {
    func multiplier(n int) -> int {
      return mult * n;
    };
    return multiplier;
  };
  var function (int) -> int = fib;
  var i int = 0;
  print "=======================================================";
  while i < 10 {
    i = i + 1;
    print "Fibonacci as a var ", i, " = ", function(i);
  };
  print "=======================================================";
  function = multiplierGenerator(5);
  print "Function as a result ", function(2);
};

{
  var stringVal string = "321421";
  print "=======================================================";
  print "Converting string to int: ", stringVal.ToInt();
};

{
  var intVal int = 321421;
  print "=======================================================";
  print "Converting int to string: ", intVal.ToString();
};

{
  var i int = 0;
  var j int = 0;
  while true {
    j = 0;
    while true {
      print "Looping ", i, ", ", j;
      j = j + 1;
      if j >= 5
        break;
    };
    i = i + 1;
    if i >= 5
      break;
  };
};
