{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrammar where

-- pretty-printer generated by the BNF converter

import AbsGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))


instance Print Error where
  prt _ (Error i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    Prog stmts -> prPrec i 0 (concatD [prt 0 stmts])

instance Print Boolean where
  prt i e = case e of
    BTrue -> prPrec i 0 (concatD [doc (showString "true")])
    BFalse -> prPrec i 0 (concatD [doc (showString "false")])

instance Print Map where
  prt i e = case e of
    MapKV exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString ":"), prt 0 exp2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Literal where
  prt i e = case e of
    LInt n -> prPrec i 0 (concatD [prt 0 n])
    LBool boolean -> prPrec i 0 (concatD [prt 0 boolean])
    LStr str -> prPrec i 0 (concatD [prt 0 str])
    LErr error -> prPrec i 0 (concatD [prt 0 error])
    LArr exps -> prPrec i 0 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])
    LTup exps -> prPrec i 0 (concatD [doc (showString "<|"), prt 0 exps, doc (showString "|>")])
    LMap maps -> prPrec i 0 (concatD [doc (showString "{"), prt 0 maps, doc (showString "}")])

instance Print Comp where
  prt i e = case e of
    CLt -> prPrec i 0 (concatD [doc (showString "<")])
    CGt -> prPrec i 0 (concatD [doc (showString ">")])
    CLe -> prPrec i 0 (concatD [doc (showString "<=")])
    CGe -> prPrec i 0 (concatD [doc (showString ">=")])
    CEq -> prPrec i 0 (concatD [doc (showString "==")])

instance Print BOp where
  prt i e = case e of
    BAnd -> prPrec i 0 (concatD [doc (showString "and")])
    BOr -> prPrec i 0 (concatD [doc (showString "or")])

instance Print Exp where
  prt i e = case e of
    ECall call -> prPrec i 6 (concatD [prt 0 call])
    EVar id -> prPrec i 6 (concatD [prt 0 id])
    ELit literal -> prPrec i 6 (concatD [prt 0 literal])
    ETimes exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "*"), prt 6 exp2])
    EDiv exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "/"), prt 6 exp2])
    EMod exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "%"), prt 6 exp2])
    EPlus exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "+"), prt 5 exp2])
    EMinus exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "-"), prt 5 exp2])
    EComp exp1 comp exp2 -> prPrec i 3 (concatD [prt 3 exp1, prt 0 comp, prt 4 exp2])
    ENot exp -> prPrec i 2 (concatD [doc (showString "not"), prt 3 exp])
    EBool exp1 bop exp2 -> prPrec i 1 (concatD [prt 1 exp1, prt 0 bop, prt 2 exp2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Call where
  prt i e = case e of
    CFun id exps -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 exps, doc (showString ")")])
    CMet id1 id2 exps -> prPrec i 0 (concatD [prt 0 id1, doc (showString "."), prt 0 id2, doc (showString "("), prt 0 exps, doc (showString ")")])

instance Print Type where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TBool -> prPrec i 0 (concatD [doc (showString "bool")])
    TError -> prPrec i 0 (concatD [doc (showString "error")])
    TString -> prPrec i 0 (concatD [doc (showString "string")])
    TArray type_ -> prPrec i 0 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
    TMap type_1 type_2 -> prPrec i 0 (concatD [doc (showString "{"), prt 0 type_1, doc (showString ":"), prt 0 type_2, doc (showString "}")])
    TTuple types -> prPrec i 0 (concatD [doc (showString "<|"), prt 0 types, doc (showString "|>")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Ret where
  prt i e = case e of
    RVoid -> prPrec i 0 (concatD [doc (showString "void")])
    RType type_ -> prPrec i 0 (concatD [prt 0 type_])

instance Print RVal where
  prt i e = case e of
    RExp exp -> prPrec i 0 (concatD [prt 0 exp])
    RNone -> prPrec i 0 (concatD [doc (showString "_")])

instance Print Param where
  prt i e = case e of
    PVal id type_ -> prPrec i 0 (concatD [prt 0 id, prt 0 type_])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Var where
  prt i e = case e of
    AVar id -> prPrec i 0 (concatD [prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Decl where
  prt i e = case e of
    DVar id type_ exp -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id, prt 0 type_, doc (showString "="), prt 0 exp])
    DFunc id params ret stmts -> prPrec i 0 (concatD [doc (showString "func"), prt 0 id, doc (showString "("), prt 0 params, doc (showString ")"), doc (showString "->"), prt 0 ret, doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print Elif where
  prt i e = case e of
    EElif exp stmts -> prPrec i 0 (concatD [doc (showString "elif"), prt 0 exp, doc (showString "{"), prt 0 stmts, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Else where
  prt i e = case e of
    EElse stmts -> prPrec i 0 (concatD [doc (showString "else"), doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print Stmt where
  prt i e = case e of
    SReturn rval -> prPrec i 0 (concatD [doc (showString "return"), prt 0 rval])
    SPrint exp -> prPrec i 0 (concatD [doc (showString "print"), prt 0 exp])
    SDecl decl -> prPrec i 0 (concatD [prt 0 decl])
    SIf exp stmts elifs -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "{"), prt 0 stmts, doc (showString "}"), prt 0 elifs])
    SIfelse exp stmts elifs else_ -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "{"), prt 0 stmts, doc (showString "}"), prt 0 elifs, prt 0 else_])
    SWhile exp stmts -> prPrec i 0 (concatD [doc (showString "while"), prt 0 exp, doc (showString "{"), prt 0 stmts, doc (showString "}")])
    SAssign vars exp -> prPrec i 0 (concatD [prt 0 vars, doc (showString "="), prt 0 exp])
    SBreak -> prPrec i 0 (concatD [doc (showString "break")])
    SCont -> prPrec i 0 (concatD [doc (showString "continue")])
    SCall call -> prPrec i 0 (concatD [prt 0 call])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])

