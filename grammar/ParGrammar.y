-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '%' { PT _ (TS _ 1) }
  '(' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '*' { PT _ (TS _ 4) }
  '+' { PT _ (TS _ 5) }
  ',' { PT _ (TS _ 6) }
  '-' { PT _ (TS _ 7) }
  '->' { PT _ (TS _ 8) }
  '.' { PT _ (TS _ 9) }
  '/' { PT _ (TS _ 10) }
  ':' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '<|' { PT _ (TS _ 15) }
  '=' { PT _ (TS _ 16) }
  '==' { PT _ (TS _ 17) }
  '>' { PT _ (TS _ 18) }
  '>=' { PT _ (TS _ 19) }
  '[' { PT _ (TS _ 20) }
  ']' { PT _ (TS _ 21) }
  'and' { PT _ (TS _ 22) }
  'bool' { PT _ (TS _ 23) }
  'elif' { PT _ (TS _ 24) }
  'else' { PT _ (TS _ 25) }
  'error' { PT _ (TS _ 26) }
  'false' { PT _ (TS _ 27) }
  'func' { PT _ (TS _ 28) }
  'if' { PT _ (TS _ 29) }
  'int' { PT _ (TS _ 30) }
  'not' { PT _ (TS _ 31) }
  'or' { PT _ (TS _ 32) }
  'print' { PT _ (TS _ 33) }
  'return' { PT _ (TS _ 34) }
  'string' { PT _ (TS _ 35) }
  'true' { PT _ (TS _ 36) }
  'var' { PT _ (TS _ 37) }
  'void' { PT _ (TS _ 38) }
  'while' { PT _ (TS _ 39) }
  '{' { PT _ (TS _ 40) }
  '|>' { PT _ (TS _ 41) }
  '}' { PT _ (TS _ 42) }

L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }
L_ident  { PT _ (TV $$) }
L_Error { PT _ (T_Error $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }
Ident   :: { Ident }   : L_ident  { Ident $1 }
Error    :: { Error} : L_Error { Error ($1)}

Program :: { Program }
Program : ListStmt { AbsGrammar.Prog (reverse $1) }
Boolean :: { Boolean }
Boolean : 'true' { AbsGrammar.BTrue }
        | 'false' { AbsGrammar.BFalse }
Map :: { Map }
Map : Value ':' Value { AbsGrammar.MapKV $1 $3 }
ListMap :: { [Map] }
ListMap : {- empty -} { [] }
        | Map { (:[]) $1 }
        | Map ',' ListMap { (:) $1 $3 }
Literal :: { Literal }
Literal : Integer { AbsGrammar.LInt $1 }
        | Boolean { AbsGrammar.LBool $1 }
        | String { AbsGrammar.LStr $1 }
        | Error { AbsGrammar.LErr $1 }
        | '[' ListValue ']' { AbsGrammar.LArr $2 }
        | '<|' ListValue '|>' { AbsGrammar.LTup $2 }
        | '{' ListMap '}' { AbsGrammar.LMap $2 }
Exp2 :: { Exp }
Exp2 : Call { AbsGrammar.ECall $1 }
     | Ident { AbsGrammar.EVar $1 }
     | Integer { AbsGrammar.EInt $1 }
     | '(' Exp ')' { $2 }
Exp1 :: { Exp }
Exp1 : Exp1 '*' Exp2 { AbsGrammar.ETimes $1 $3 }
     | Exp1 '/' Exp2 { AbsGrammar.EDiv $1 $3 }
     | Exp1 '%' Exp2 { AbsGrammar.EMod $1 $3 }
     | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp '+' Exp1 { AbsGrammar.EPlus $1 $3 }
    | Exp '-' Exp1 { AbsGrammar.EMinus $1 $3 }
    | Exp1 { $1 }
BExp3 :: { BExp }
BExp3 : Call { AbsGrammar.BCall $1 }
      | Ident { AbsGrammar.BVar $1 }
      | Boolean { AbsGrammar.BBool $1 }
      | '(' BExp ')' { $2 }
BExp2 :: { BExp }
BExp2 : Exp '<' Exp { AbsGrammar.BLt $1 $3 }
      | Exp '>' Exp { AbsGrammar.BGt $1 $3 }
      | Exp '<=' Exp { AbsGrammar.BLe $1 $3 }
      | Exp '>=' Exp { AbsGrammar.BGe $1 $3 }
      | Exp '==' Exp { AbsGrammar.BEq $1 $3 }
      | BExp3 { $1 }
BExp1 :: { BExp }
BExp1 : 'not' BExp { AbsGrammar.BNot $2 } | BExp2 { $1 }
BExp :: { BExp }
BExp : BExp 'and' BExp1 { AbsGrammar.BAnd $1 $3 }
     | BExp 'or' BExp1 { AbsGrammar.BOr $1 $3 }
     | BExp1 { $1 }
Type :: { Type }
Type : 'int' { AbsGrammar.TInt }
     | 'bool' { AbsGrammar.TBool }
     | 'error' { AbsGrammar.TError }
     | 'string' { AbsGrammar.TString }
     | '[' Type ']' { AbsGrammar.TArray $2 }
     | '{' Type ':' Type '}' { AbsGrammar.TMap $2 $4 }
     | '<|' ListType '|>' { AbsGrammar.TTuple $2 }
ListType :: { [Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }
Ret :: { Ret }
Ret : 'void' { AbsGrammar.RVoid } | Type { AbsGrammar.RType $1 }
Param :: { Param }
Param : Ident Type { AbsGrammar.PVal $1 $2 }
ListParam :: { [Param] }
ListParam : {- empty -} { [] }
          | Param { (:[]) $1 }
          | Param ',' ListParam { (:) $1 $3 }
Call :: { Call }
Call : Ident '(' ListValue ')' { AbsGrammar.CFun $1 $3 }
     | Ident '.' Ident '(' ListValue ')' { AbsGrammar.CMet $1 $3 $5 }
Value :: { Value }
Value : Literal { AbsGrammar.VLit $1 }
      | Ident { AbsGrammar.VVar $1 }
      | Call { AbsGrammar.VCall $1 }
      | Exp { AbsGrammar.VExp $1 }
      | BExp { AbsGrammar.VBExp $1 }
ListValue :: { [Value] }
ListValue : {- empty -} { [] }
          | Value { (:[]) $1 }
          | Value ',' ListValue { (:) $1 $3 }
Var :: { Var }
Var : Ident { AbsGrammar.AVar $1 }
ListVar :: { [Var] }
ListVar : {- empty -} { [] }
        | Var { (:[]) $1 }
        | Var ',' ListVar { (:) $1 $3 }
Decl :: { Decl }
Decl : 'var' Ident Type { AbsGrammar.DVar $2 $3 }
     | 'var' Ident Type '=' Value { AbsGrammar.DVarI $2 $3 $5 }
     | 'func' Ident '(' ListParam ')' '->' Ret '{' ListStmt '}' { AbsGrammar.DFunc $2 $4 $7 (reverse $9) }
Elif :: { Elif }
Elif : 'elif' BExp '{' ListStmt '}' { AbsGrammar.EElif $2 (reverse $4) }
ListElif :: { [Elif] }
ListElif : {- empty -} { [] } | ListElif Elif { flip (:) $1 $2 }
Else :: { Else }
Else : 'else' '{' ListStmt '}' { AbsGrammar.EElse (reverse $3) }
Stmt :: { Stmt }
Stmt : Decl { AbsGrammar.SDecl $1 }
     | ListVar '=' Value { AbsGrammar.SAssign $1 $3 }
     | Call { AbsGrammar.SCall $1 }
     | 'if' BExp '{' ListStmt '}' ListElif { AbsGrammar.SIf $2 (reverse $4) (reverse $6) }
     | 'if' BExp '{' ListStmt '}' ListElif Else { AbsGrammar.SIfelse $2 (reverse $4) (reverse $6) $7 }
     | 'while' BExp '{' ListStmt '}' { AbsGrammar.SWhile $2 (reverse $4) }
     | 'return' Value { AbsGrammar.SReturn $2 }
     | 'print' Value { AbsGrammar.SPrint $2 }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] }
         | ListStmt Stmt ';' { flip (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

