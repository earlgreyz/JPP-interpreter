module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transError :: Error -> Result
transError x = case x of
  Error string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog stmts -> failure x
transBoolean :: Boolean -> Result
transBoolean x = case x of
  BTrue -> failure x
  BFalse -> failure x
transMap :: Map -> Result
transMap x = case x of
  MapKV exp1 exp2 -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  LInt integer -> failure x
  LBool boolean -> failure x
  LStr string -> failure x
  LErr error -> failure x
  LArr exps -> failure x
  LTup exps -> failure x
  LMap maps -> failure x
transComp :: Comp -> Result
transComp x = case x of
  CLt -> failure x
  CGt -> failure x
  CLe -> failure x
  CGe -> failure x
  CEq -> failure x
transBOp :: BOp -> Result
transBOp x = case x of
  BAnd -> failure x
  BOr -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ECall call -> failure x
  EVar ident -> failure x
  ELit literal -> failure x
  ETimes exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EMod exp1 exp2 -> failure x
  EPlus exp1 exp2 -> failure x
  EMinus exp1 exp2 -> failure x
  EComp exp1 comp exp2 -> failure x
  ENot exp -> failure x
  EBool exp1 bop exp2 -> failure x
transCall :: Call -> Result
transCall x = case x of
  CFun ident exps -> failure x
  CMet ident1 ident2 exps -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TBool -> failure x
  TError -> failure x
  TString -> failure x
  TArray type_ -> failure x
  TMap type_1 type_2 -> failure x
  TTuple types -> failure x
transRet :: Ret -> Result
transRet x = case x of
  RVoid -> failure x
  RType type_ -> failure x
transRVal :: RVal -> Result
transRVal x = case x of
  RExp exp -> failure x
  RNone -> failure x
transParam :: Param -> Result
transParam x = case x of
  PVal ident type_ -> failure x
transVar :: Var -> Result
transVar x = case x of
  AVar ident -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DVar ident type_ exp -> failure x
  DFunc ident params ret stmts -> failure x
transElif :: Elif -> Result
transElif x = case x of
  EElif exp stmts -> failure x
transElse :: Else -> Result
transElse x = case x of
  EElse stmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SReturn rval -> failure x
  SPrint exp -> failure x
  SDecl decl -> failure x
  SIf exp stmts elifs -> failure x
  SIfelse exp stmts elifs else_ -> failure x
  SWhile exp stmts -> failure x
  SAssign vars exp -> failure x
  SBreak -> failure x
  SCont -> failure x
  SCall call -> failure x

